

Parameters:
  VPC: 
    Description: your VPC
    Type: String
  PrivateSubnet1:
    Description: your private subnet1 for ASG
    Type: String
  PrivateSubnet2: 
    Description: your private subnet2 for ASG
    Type: String
  PublicSubnet1:
    Description: your Public Subnet1 for ALB
    Type: String
  PublicSubnet2:
    Description: your Public Subnet2 for ALB
    Type: String
  StandaloneOrAsg:
    Description: Enter your choice (Standalone or ASG)
    Type: String
    AllowedValues:
    - 'Standalone'
    - 'ASG'

  StandaloneWithLBorStandaloneNoLB:
    Description: Do you want LB with standslone server or Not
    Type: String
    AllowedValues:
    - 'yes'
    - 'no'
  
  MinSize:
    Description: Enter the minimum capacity 
    Type : String
    Default: 0
  MaxSize:
    Description: Enter the maximum capacity 
    Type : String
    Default: 0
  DesiredCapacity:
    Description: Enter the Desired capacity 
    Type : String
    Default: 0
  ImageIdforEC2:
    Description: Enter the server image ID
    Type: AWS::EC2::Image::Id
    Default: ami-0b0dcb5067f052a63
  InstanceType:
    Description: Enter the server image ID
    Type: String
    Default: t2.micro

  



Conditions:
  standalone:
    !Equals ['Standalone', !Ref StandaloneOrAsg]
  asg:
    !Equals ['ASG', !Ref StandaloneOrAsg]

  WithLB:
    !Equals ['true', !Ref StandaloneWithLBorStandaloneNoLB]
  NoLB:
    !Equals ['false', !Ref StandaloneWithLBorStandaloneNoLB]

  standaloneWithALB: !And
    - !Condition standalone
    - !Condition WithLB

  standaloneNoALB: !And
    - !Condition standalone
    - !Condition NoLB

  common: !Or
    - !Condition asg
    - !Condition standalone




  
  
Resources:    

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALBSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          CidrIp: 0.0.0.0/0 

      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: ALBSG
          
            
 
        
  ApplicationLoadBalancer: 
    Condition: common
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  LoadBalancerListener: # Port 80
    Condition: common
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Condition: common
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC


  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WebSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          CidrIp: 0.0.0.0/0

      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: WebSG

  NewKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: promotwo

  myLaunchTemplate:
    Condition: asg
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: My-launch-template
      LaunchTemplateData:
        ImageId: !Ref ImageIdforEC2
        InstanceType: !Ref InstanceType
        KeyName: !Ref NewKeyPair
        SecurityGroupIds: 
          - !Ref WebSecurityGroup

        UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              yum install httpd -y
              service httpd start  
              echo "<html><body><h1>Hello from Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html


  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: asg
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  Standalone1:
    Type: AWS::EC2::Instance
    Condition: standaloneWithALB
    Properties:
      ImageId: !Ref ImageIdforEC2
      InstanceType: !Ref InstanceType
      KeyName: !Ref NewKeyPair
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !Ref WebSecurityGroup
      UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              yum install httpd -y
              service httpd start  
              echo "<html><body><h1>Hello from Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html

  Standalone2:
    Type: AWS::EC2::Instance
    Condition: standaloneNoALB
    Properties:
      ImageId: !Ref ImageIdforEC2
      InstanceType: !Ref InstanceType
      KeyName: !Ref NewKeyPair
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !Ref WebSecurityGroup
      UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              yum install httpd -y
              service httpd start  
              echo "<html><body><h1>Hello from Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html







        